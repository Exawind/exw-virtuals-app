name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  host-build:
    runs-on: ubuntu-latest
    name: GCC v9.3.0
    steps:
      - uses: actions/checkout@v2
      - name: Configure and build
        run: |
          cmake -Bbuild \
            -DCMAKE_CXX_STANDARD:STRING="17" \
            -DKokkos_ENABLE_SERIAL=ON \
            -DKokkos_ENABLE_OPENMP=OFF \
            -DKokkos_ENABLE_CUDA=OFF \
            -DKokkos_ENABLE_HIP=OFF \
            -DKokkos_ENABLE_OPENMPTARGET=OFF .
          cmake --build build -- -j $(nproc)
      - name: Execute
        run: |
          cd build
          ./exw_virtuals
  cuda-build:
    runs-on: ubuntu-latest
    name: NVIDIA CUDA v11.0 + GCC v9.3.0
    steps:
      - uses: actions/checkout@v2
      - name: Prepare CUDA environment
        run: |
          export DEBIAN_FRONTEND=noninteractive
          wget -q -O - https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | sudo apt-key add -
          echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" | sudo tee /etc/apt/sources.list.d/cuda.list
          echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" | sudo tee /etc/apt/sources.list.d/nvidia-ml.list
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
              libopenmpi-dev cuda-command-line-tools-11-0 cuda-compiler-11-0 cuda-minimal-build-11-0 cuda-nvml-dev-11-0 cuda-nvtx-11-0
      - name: Configure and build
        run: |
          export PATH=/usr/local/nvidia/bin:/usr/local/cuda-11.0/bin:${PATH}
          export LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda-11.0/lib:${LD_LIBRARY_PATH}
          cmake -Bbuild \
            -DCMAKE_CXX_COMPILER=$(pwd)/bin/nvcc_wrapper \
            -DCMAKE_CXX_STANDARD:STRING="17" \
            -DKokkos_ENABLE_SERIAL=ON \
            -DKokkos_ENABLE_OPENMP=OFF \
            -DKokkos_ENABLE_CUDA=ON \
            -DKokkos_ENABLE_HIP=OFF \
            -DKokkos_ENABLE_OPENMPTARGET=OFF \
            -DKokkos_ENABLE_CUDA_LAMBDA=ON \
            -DKokkos_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE=ON \
            -DKokkos_ARCH_VOLTA70=ON .
          cmake --build build -- -j $(nproc)
  hip-build:
    runs-on: ubuntu-latest
    name: AMD HIP/ROCm
    steps:
      - uses: actions/checkout@v2
      - name: Prepare HIP/ROCm environment
        run: |
          export DEBIAN_FRONTEND=noninteractive
          wget -q -O - http://repo.radeon.com/rocm/rocm.gpg.key | sudo apt-key add -
          echo 'deb [arch=amd64] http://repo.radeon.com/rocm/apt/debian/ xenial main' | sudo tee /etc/apt/sources.list.d/rocm.list
          sudo apt-get update
          sudo apt-get install -y rocm-dev
      - name: Configure and build
        run: |
          echo 'export PATH=$PATH:/opt/rocm/bin:/opt/rocm/profiler/bin:/opt/rocm/opencl/bin' | sudo tee -a /etc/profile.d/rocm.sh
          source /etc/profile.d/rocm.sh
          cmake -Bbuild \
            -DCMAKE_CXX_COMPILER=$(which hipcc) \
            -DCMAKE_CXX_STANDARD:STRING="17" \
            -DKokkos_ENABLE_SERIAL=ON \
            -DKokkos_ENABLE_OPENMP=OFF \
            -DKokkos_ENABLE_CUDA=OFF \
            -DKokkos_ENABLE_HIP=ON \
            -DKokkos_ENABLE_OPENMPTARGET=OFF \
            -DKokkos_ARCH_VEGA906=ON \
            -DEXAWIND_TEST_VIRTUALS=OFF .
          cmake --build build -- -j $(nproc)
  openmptarget-build:
    runs-on: ubuntu-latest
    name: Intel OneAPI OpenMPTarget
    steps:
      - uses: actions/checkout@v2
      - name: Prepare DPC++ environment
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends intel-oneapi-dpcpp-cpp-compiler
      - name: Configure and build
        run: |
          set +e
          source /opt/intel/oneapi/setvars.sh
          set -e
          cmake -Bbuild \
            -DCMAKE_CXX_COMPILER=$(which icpx) \
            -DCMAKE_CXX_STANDARD:STRING="17" \
            -DKokkos_ENABLE_SERIAL=ON \
            -DKokkos_ENABLE_OPENMP=OFF \
            -DKokkos_ENABLE_CUDA=OFF \
            -DKokkos_ENABLE_HIP=OFF \
            -DKokkos_ENABLE_OPENMPTARGET=ON \
            -DKokkos_ARCH_INTEL_GEN=ON \
            -DEXAWIND_TEST_VIRTUALS=OFF .
          cmake --build build -- -j $(nproc)
  sycl-build:
    runs-on: ubuntu-latest
    name: Intel OneAPI SYCL
    steps:
      - uses: actions/checkout@v2
      - name: Prepare DPC++ environment
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends intel-oneapi-dpcpp-cpp-compiler
      - name: Configure and build
        run: |
          set +e
          source /opt/intel/oneapi/setvars.sh
          set -e
          cmake -Bbuild \
            -DCMAKE_CXX_COMPILER=$(which icpx) \
            -DCMAKE_CXX_STANDARD:STRING="17" \
            -DKokkos_ENABLE_SERIAL=ON \
            -DKokkos_ENABLE_OPENMP=OFF \
            -DKokkos_ENABLE_CUDA=OFF \
            -DKokkos_ENABLE_HIP=OFF \
            -DKokkos_ENABLE_OPENMPTARGET=OFF \
            -DKokkos_ENABLE_SYCL=ON \
            -DKokkos_ARCH_INTEL_GEN=ON \
            -DEXAWIND_TEST_VIRTUALS=OFF .
          cmake --build build -- -j $(nproc)
